target Python 

import GlacierMachine from "../../../glacier/src/GlacierMachine.lf"

reactor TrainDoor extends GlacierMachine{
    state timestamp = {= self.data_model.get_node("TrainDoor/timestamp") =}
    state opened = {= self.data_model.get_node("TrainDoor/opened") =}

    state op = {= self.data_model.get_node("TrainDoor/operation") =}

    method operation(operation){=
        if operation == "m":
            return "Motion detected!"
            self.timestamp.update(lf.time.logical_elapsed())
        elif operation == "o":
            if self.opened.read():
                return "The door is already open"
            else:
                if self.timestamp == 0 or lf.time.logical_elapsed() - self.timestamp.read() > SECS(2):
                    self.opened.update(True)
                    return "Opening the door."
                else:
                    return "Cannot open the door recent motion detected."
        elif operation == "c":
            self.opened.update(False)
            return "Closing the door"
    =}

    reaction(startup){=
        self.op.callback = self.operation 
    =}


}