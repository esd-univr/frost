target Python{
    fast: True,
    files: [../models/l_formatter.py, ../models/time_utils.py, ../models/singleton_meta.py],
}

import PingPong from "PingPong.lf"
import GlacierBus from "../../../../glacier/src/GlacierBus.lf"
import Scheduler from "Scheduler.lf"

preamble{=
    import yaml
    import math 
    from enum import Enum
    CONFIG_PATH = "models/configuration.yaml"
    from machine_data_model.protocols.glacier_v1.glacier_message import GlacierMessage
    from machine_data_model.protocols.glacier_v1.glacier_header import MsgType, MsgNamespace, ProtocolMsgName, GlacierHeader
    from machine_data_model.protocols.glacier_v1.glacier_payload import VariablePayload, ProtocolPayload, MethodPayload 
    from machine_data_model.protocols.glacier_v1.glacier_protocol_mng import GlacierProtocolMng
    from machine_data_model.builder.data_model_builder import DataModelBuilder
    from machine_data_model.protocols.protocol_mng import Message
    from machine_data_model.nodes.method_node import MethodNode, AsyncMethodNode
    from machine_data_model.nodes.composite_method.composite_method_node import CompositeMethodNode
    from machine_data_model.nodes.variable_node import NumericalVariableNode, StringVariableNode, BooleanVariableNode, ObjectVariableNode
    from machine_data_model.nodes.folder_node import FolderNode
    import uuid
    import logging
    from singleton_meta import SingletonMeta
    from enum import IntEnum
    from time_utils import TimeUtils, TimeFormat, convert, f_convert
    from l_formatter import LFormatter    
=}


main reactor{

    preamble{=
        with open(CONFIG_PATH) as stream:
            config = yaml.safe_load(stream)
        TIME_FORMAT = TimeFormat[config["time_format"]]

        handler = logging.StreamHandler()
        handler.setFormatter(LFormatter(lf.time.logical_elapsed, TIME_FORMAT))
        logger = logging.getLogger()
        logger.addHandler(handler)
    =}
    PingPong = new PingPong(model_path = "models/PingPong.yml", update_step = 1nsec)
    scheduler = new Scheduler()
    bus = new GlacierBus(model_path = "models/Common_Bus.yml",width = 2)
    
    PingPong.channel_out, scheduler.channel_out -> bus.channel_in after 0 nsec
    bus.channel_out -> PingPong.channel_in, scheduler.channel_in after 0 nsec
}